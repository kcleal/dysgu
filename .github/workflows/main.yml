name: Build

on: [push, pull_request, workflow_dispatch]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    env:
      PREFIX: "/usr/local/"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macOS-15, macOS-13]
        include:
          - os: macOS-15
            arch: arm64
          - os: macOS-13
            arch: x86_64
          - os: ubuntu-24.04
            arch: x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Set correct paths for Homebrew on macOS
        if: startsWith(matrix.os, 'macOS')
        run: |
          export BREW_PREFIX="$(brew --prefix)"
          export PREFIX="$(brew --prefix)"
          export PATH="$BREW_PREFIX/bin:$PATH"
          export LIBRARY_PATH="$BREW_PREFIX/lib:$LIBRARY_PATH"
          export PKG_CONFIG_PATH="$BREW_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
          export MACOSX_DEPLOYMENT_TARGET=14.0
          echo "MACOSX_DEPLOYMENT_TARGET=14.0" >> $GITHUB_ENV
          brew install libomp

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.10,<3.14"
          CIBW_SKIP: "*-win32 *-manylinux_i686 pp* *musl* "
          # Only build for the appropriate architecture on each runner
          CIBW_ARCHS_MACOS: "${{ matrix.arch }}"
          CIBW_ARCHS_LINUX: "auto"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28

          #CIBW_ENVIRONMENT: HTSLIB_PREFIX="/usr/local" PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
          #CIBW_ENVIRONMENT_MACOS: HTSLIB_PREFIX="/usr/local" PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" MACOSX_DEPLOYMENT_TARGET=14.0
          #CIBW_CONFIG_SETTINGS: "setup-args=-Dhtslib_prefix=$GITHUB_WORKSPACE/htslib-1.21"

          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=14.0

          CIBW_BUILD_VERBOSITY: 1

          CIBW_BEFORE_BUILD: |
            pip install "meson>=0.64" "ninja" "cython>=3.0.0" "numpy" "pysam>=0.23.0"
            #echo "Checking for htslib in $HTSLIB_PREFIX"
            #ls -la /usr/local/lib/lib*hts*
            #ls -la /usr/local/include/htslib || echo "htslib include dir not found"
            #pkg-config --libs --cflags htslib || echo "htslib pkg-config not available"

          #CIBW_BEFORE_ALL_MACOS: |
          #  sudo bash ci/osx-deps

          #CIBW_BEFORE_ALL_LINUX: |
          #  bash ci/manylinux-deps

          #CIBW_BEFORE_BUILD_MACOS: |
          #  ln -s /Library/Frameworks/Python.framework/Versions/3.11/include/python3.11/cpython/longintrepr.h /Library/Frameworks/Python.framework/Versions/3.11/include/python3.11

          CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
            delocate-wheel -w {dest_dir} -v {wheel} --require-target-macos-version 14.0

          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            # More extensive search to locate the library
            echo "Searching for htslib libraries..."
            find /project -type f -name "libhts.so*" || echo "No libhts.so found in /project"
            find /tmp -type f -name "libhts.so*" || echo "No libhts.so found in /tmp"
            find /project -type d -path "*/htslib*" || echo "No htslib directory found"

            # Establish location where we want to place the symlinks
            mkdir -p /tmp/lib_fix

            # Copy the actual library and create symlinks
            original_lib=$(find /project -type f -name "libhts.so*" | head -1)
            if [ -n "$original_lib" ]; then
              cp "$original_lib" /tmp/lib_fix/
              lib_name=$(basename "$original_lib")
              ln -sf "/tmp/lib_fix/$lib_name" /tmp/lib_fix/libhts.so.3
              ln -sf /tmp/lib_fix/libhts.so.3 /tmp/lib_fix/libhts.so
              echo "Created symlinks in /tmp/lib_fix"
              ls -la /tmp/lib_fix

              # Use this directory for auditwheel
              auditwheel repair --lib-sdir /tmp/lib_fix -w {dest_dir} {wheel}
            else
              echo "CRITICAL: Could not find libhts.so library!"
              echo "Contents of build directory:"
              find /project -type f -name "*.so*" | sort
              exit 1
            fi

          CIBW_TEST_SKIP: "*-macosx_arm64"

          CIBW_TEST_REQUIRES: |
            cython click>=8.0 superintervals>=0.2.10 numpy scipy pandas pysam>=0.23.0 networkx>=2.4 scikit-learn>=0.22 sortedcontainers lightgbm

          CIBW_TEST_COMMAND: dysgu test --verbose

      - uses: actions/upload-artifact@v4
        with:
          name: wheelhouse-${{ matrix.os }}-${{ matrix.arch }}-${{ github.run_id }}
          path: ./wheelhouse/*.whl
